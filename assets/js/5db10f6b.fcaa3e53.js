"use strict";(self.webpackChunkend_user_docs=self.webpackChunkend_user_docs||[]).push([[3132],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>u});var n=a(7294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var s=n.createContext({}),d=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=d(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),h=d(a),u=o,m=h["".concat(s,".").concat(u)]||h[u]||p[u]||r;return a?n.createElement(m,i(i({ref:t},c),{},{components:a})):n.createElement(m,i({ref:t},c))}));function u(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=a.length,i=new Array(r);i[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var d=2;d<r;d++)i[d]=a[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},9627:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var n=a(7462),o=(a(7294),a(3905));const r={title:"Batch Jobs",hide_table_of_contents:!1},i=void 0,l={unversionedId:"quickstart/batch-jobs",id:"quickstart/batch-jobs",title:"Batch Jobs",description:"[notebook]//github.com/strmprivacy/demos/blob/main/strmbatchmode_demo.ipynb",source:"@site/docs/quickstart/batch-jobs.md",sourceDirName:"quickstart",slug:"/quickstart/batch-jobs",permalink:"/docs/latest/quickstart/batch-jobs",draft:!1,tags:[],version:"current",frontMatter:{title:"Batch Jobs",hide_table_of_contents:!1},sidebar:"docs",previous:{title:"Quickstart Batch processing",permalink:"/docs/latest/quickstart/index-batch"},next:{title:"Batch Exporter",permalink:"/docs/latest/quickstart/batch-exporter"}},s={},d=[{value:"Create a STRM batch mode pipeline",id:"create-a-strm-batch-mode-pipeline",level:2},{value:"On the menu",id:"on-the-menu",level:3},{value:"Create a data connection",id:"create-a-data-connection",level:3},{value:"Define the data contract",id:"define-the-data-contract",level:3},{value:"Define a batch job in the CLI.",id:"define-a-batch-job-in-the-cli",level:3},{value:"Indicate the consent field",id:"indicate-the-consent-field",level:4},{value:"Define the derived data",id:"define-the-derived-data",level:3},{value:"Intermezzo: Privacy-transforming your data",id:"intermezzo-privacy-transforming-your-data",level:4},{value:"A real-world case for derived data: masking for recommenders",id:"a-real-world-case-for-derived-data-masking-for-recommenders",level:4},{value:"Generate the batch data",id:"generate-the-batch-data",level:3},{value:"Explore privacy-transformed data",id:"explore-privacy-transformed-data",level:3},{value:"Input data",id:"input-data",level:4},{value:"6.2 Encrypted data",id:"62-encrypted-data",level:4},{value:"Derived Data",id:"derived-data",level:4},{value:"Example notebook",id:"example-notebook",level:3},{value:"In sum: STRM Batch mode",id:"in-sum-strm-batch-mode",level:3}],c={toc:d};function p(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"We're expanding our platform with support for batch processing. Read along, jump right to the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/strmprivacy/demos/blob/main/strm_batch_mode_demo.ipynb"},"the example\nnotebook")," or read more about the ",(0,o.kt)("a",{parentName:"p",href:"/docs/latest/concepts/batch-jobs"},"background for batch pipelines"),"."),(0,o.kt)("h2",{id:"create-a-strm-batch-mode-pipeline"},"Create a STRM batch mode pipeline"),(0,o.kt)("p",null,"With batch mode, you can set up data routines that, based on the data contract, grab data from (currently) a bucket,\ntransform according to a data contract and subsequently pick it up for downstream processing."),(0,o.kt)("p",null,"This is a powerful way to quickly set up data pipelines to feed applications that process or need sensitive data in\nbatch routines without the overhead. In the real-world this means you align on the privacy implications with your\nsecurity and/or legal counterparts first, and because privacy comes by design and is encoded into the pipeline AND data\nitself, you can just go ahead and build a bunch."),(0,o.kt)("p",null,"This saves you a lot of trips to legal desks, and so improves your quality of life considerably."),(0,o.kt)("p",null,"(we're joking - it just means you can build faster)."),(0,o.kt)("h3",{id:"on-the-menu"},"On the menu"),(0,o.kt)("p",null,"These are the steps we will walk through today:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Create a data connection to retrieve and store the data"),(0,o.kt)("li",{parentName:"ul"},"Define the data contract your data adheres to."),(0,o.kt)("li",{parentName:"ul"},"Define a batch job in the CLI"),(0,o.kt)("li",{parentName:"ul"},"Generate some data for demo purposes"),(0,o.kt)("li",{parentName:"ul"},"Explore the transformed data for downstream consumption")),(0,o.kt)("p",null,"Let's go!"),(0,o.kt)("h3",{id:"create-a-data-connection"},"Create a data connection"),(0,o.kt)("p",null,"The first step is to create a data connection to read and write your (privacy transformed) data."),(0,o.kt)("p",null,"You can reuse an existing data-connector you have defined already, or define a new one quickly via either console or CLI:"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"strm create data-connector --credentials-file yourcredsfile.json --data-connector-type S3")),(0,o.kt)("p",null,"In the console it's behind the ",(0,o.kt)("inlineCode",{parentName:"p"},"data-connector")," menu tab:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"create data-connector in console",src:a(2139).Z,width:"1774",height:"1126"})),(0,o.kt)("p",null,"This early release supports AWS S3 data-connectors. ",(0,o.kt)("a",{parentName:"p",href:"/docs/latest/quickstart/batch-exporter"},"Head over to the docs")," for more detail on\ncreating and managing data-connectors."),(0,o.kt)("h3",{id:"define-the-data-contract"},"Define the data contract"),(0,o.kt)("p",null,"The next step is to instruct us what your data looks like. This is done in the ",(0,o.kt)("em",{parentName:"p"},"data contract"),", which combines the data\nshape (your fields) with the privacy implications."),(0,o.kt)("p",null,"These are the shape and classification for the ",(0,o.kt)("a",{parentName:"p",href:"https://strmprivacy.io/schemas/strmprivacy/example/1.3.0/"},"privacy demo event\ncontract"),":"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Data shape"),"\n",(0,o.kt)("img",{alt:"a defined data schema",src:a(283).Z,width:"1912",height:"624"})),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Data classification"),"\n",(0,o.kt)("img",{alt:"define the privacy implications",src:a(3270).Z,width:"1860",height:"734"})),(0,o.kt)("p",null,"You can use an existing data contract or create your own. Refer to this blog on ",(0,o.kt)("a",{parentName:"p",href:"https://strmprivacy.io/posts/add-your-own-schemas/"},"creating data\ncontracts"),". We also offer what we call ",(0,o.kt)("a",{parentName:"p",href:"https://strmprivacy.io/posts/simple-data-schemas/"},"Simple\nSchemas"),", a much easier way to define your data shape than the\nunderlying AVRO serialization schema."),(0,o.kt)("h3",{id:"define-a-batch-job-in-the-cli"},"Define a batch job in the CLI."),(0,o.kt)("p",null,"With the data connection and contract defined, we can now define the batch job itself."),(0,o.kt)("p",null,"In this early release this is done by providing a config JSON through our CLI:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"\u276f strm create batch-job --help\nCreate a Batch Job\n\nUsage:\n  strm create batch-job [flags]\n\nFlags:\n  -F, --file stringThe path to the JSON file containing the batch job configuration\n  -h, --help help for batch-job\n")),(0,o.kt)("p",null,"The JSON simply details which data-connector to use, what contract to apply and how to write the data back. We are\nworking to include GCP Storage, a visual interface and even a file upload in follow-on releases."),(0,o.kt)("h4",{id:"indicate-the-consent-field"},"Indicate the consent field"),(0,o.kt)("p",null,"An important part of the definition file is the consent mapping."),(0,o.kt)("p",null,"In streaming mode, you simply send us the consent (legal ground under which the data was collected) as part of every event."),(0,o.kt)("p",null,"For batch mode you need to indicate which field in your data actually contains the legal ground per row."),(0,o.kt)("p",null,"In the definition file you need to set these three values:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"what the default legal ground (consent level) is."),(0,o.kt)("li",{parentName:"ul"},"the field that contains the legal ground in your data and"),(0,o.kt)("li",{parentName:"ul"},"what each of these fields mean (a mapping of name to integer values)")),(0,o.kt)("p",null,"About the default consent: It's safest to keep this to int 0. It just means the data was collected under the most basic\nconsent or legal ground you use."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json5"},'{\n  // partial excerpt\n  "consent": {\n    "default_consent_levels": [ 0 ],\n    "consent_level_extractor": {\n      "field": "the field that indicates collection ground",\n      "field_patterns": {\n        "example, like legitimate interest": {\n          "consent_levels": [ 1 ]\n        },\n        "example, like marketing": {\n          "consent_levels": [ 2 ]\n        }\n      }\n    }\n  }\n  // partial excerpt\n}\n')),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/strmprivacy/demos/blob/main/strm_batch_mode_demo.ipynb"},"An example of the full definition file is included in the demo\nnotebook"),". Just swap the example values for\nyour own billing_id, data-connector names and preferred buckets."),(0,o.kt)("h3",{id:"define-the-derived-data"},"Define the derived data"),(0,o.kt)("p",null,"The next step is to define the derived data - the privacy-transformed output. Just think of this as a folder on a disk\nthat contains data that is ready for a specific purpose (like, in the example below, training a recommender)."),(0,o.kt)("p",null,"First, let's dive a bit deeper into how we transform. For reasons of the tutorial, we'll focus on a specific derived\nstream - in real-world applications you would probably have many different consent levels (the legal ground under which\ndata is collected) and so a bunch of different derived streams."),(0,o.kt)("h4",{id:"intermezzo-privacy-transforming-your-data"},"Intermezzo: Privacy-transforming your data"),(0,o.kt)("p",null,"Based on the event-contract, we process and transform the data in your batches. The level of privacy we can achieve\ndepends on the format of your source data."),(0,o.kt)("p",null,"Let us explain:"),(0,o.kt)("p",null,"We use the temporal dimension in data to achieve a fast but powerful way to apply the necessary transformations (through\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"keyField")," in the event contract) through encryption. It is therefore important to understand that data is\npseudonimized at best unless you have multiple rows per user that are closely spaced in time (like separated clicks or\nurl hits with context data)."),(0,o.kt)("p",null,"We plan to extend the privacy transforms soon, but as we expand into batch mode from streaming mode (where you usually\nhave separate but closely spaced data points - e.g. events over multiple days) this is currently an important\nlimitation."),(0,o.kt)("p",null,"So are you planning to use batch mode for e.g. user profile info, where every row is just one user? That won't get you\nanonymized data currently!"),(0,o.kt)("h4",{id:"a-real-world-case-for-derived-data-masking-for-recommenders"},"A real-world case for derived data: masking for recommenders"),(0,o.kt)("p",null,"Back to a real-world case. Imagine you have a batch job with clickstream data you plan to use to train or evaluate a recommender system."),(0,o.kt)("p",null,"Your data includes a pii field that you do not want or are not allowed to reveal, while you do need it for your data\nanalysis. Recommendations are highly personal and therefore require linking previous behaviour (orders, movies etc.) to\nthe same user."),(0,o.kt)("p",null,'The only "personality dimension" a basic recommender really needs is to know what was the same user. They do not\nnecessarily need to know who was the underlying customer. This is where masking comes in.'),(0,o.kt)("p",null,"By masking a field, we replace the actual value (e.g. the customer id) with a hash, allowing to link multiple data\npoints to a single user, without revealing personal information. This can be done with derived streams."),(0,o.kt)("p",null,"In the snippet below, you will find the ",(0,o.kt)("inlineCode",{parentName:"p"},"derived_data")," configuration of the batch-job. This configuration shows the\ndata-connector to read ",(0,o.kt)("em",{parentName:"p"},"from"),", the file to write ",(0,o.kt)("em",{parentName:"p"},"to")," and the allowed consent levels and consent type of the data like\nbefore. Finally, the snippet also shows the ",(0,o.kt)("inlineCode",{parentName:"p"},"masked_fields"),". Within the event-contract block\n",(0,o.kt)("inlineCode",{parentName:"p"},'"databert-handle/batch_job_public/1.0.1"{ ... }')," you can find the column names or ",(0,o.kt)("inlineCode",{parentName:"p"},"field_patterns")," of the fields to\nmask."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  // partial excerpt\n  "derived_data": [\n    {\n      "target": {\n        "data_connector_ref": {\n          "billing_id": "your_billing_id",\n          "name": "databert-demo"\n        },\n        "data_type": {\n          "csv": {\n            "charset": "UTF-8"\n          }\n        },\n        "file_name": "databert-demo-derived.csv"\n      },\n      "consent_levels": [\n        2\n      ],\n      "consent_level_type": "CUMULATIVE",\n      "masked_fields": {\n        "field_patterns": {\n          "databert-handle/batch_job_public/1.0.0": {\n            "field_patterns": [\n              "Email",\n              "UserName"\n            ]\n          }\n        }\n      }\n    }\n  ]\n  // partial excerpt\n}\n')),(0,o.kt)("h3",{id:"generate-the-batch-data"},"Generate the batch data"),(0,o.kt)("p",null,"In a batch job, data is read, transformed and returned as soon as new files are found inside the bucket."),(0,o.kt)("p",null,"To simulate a data routine you already have or plan to set up, the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/strmprivacy/demos/blob/main/strm_batch_mode_demo.ipynb"},"example notebook")," includes a\n",(0,o.kt)("inlineCode",{parentName:"p"},"DataGenerator"),' class that simulates some random user data (when we say random, we really mean "non-sensical").  Apart\nfrom session, user and meta (like a timestamp) fields you will recognize the ',(0,o.kt)("inlineCode",{parentName:"p"},"PrivacyPlane")," as the consent field in step\n3.1 above."),(0,o.kt)("p",null,"Clone/fork/download the notebook and add/replace your own ",(0,o.kt)("inlineCode",{parentName:"p"},"billing_id")," and credentials in the ",(0,o.kt)("inlineCode",{parentName:"p"},"AwsProperties()")," class\nand ",(0,o.kt)("inlineCode",{parentName:"p"},"s3.json")," to quickly prepare a demo pipeline of your own."),(0,o.kt)("h3",{id:"explore-privacy-transformed-data"},"Explore privacy-transformed data"),(0,o.kt)("p",null,"We have now defined the data shape and privacy implications (the ",(0,o.kt)("inlineCode",{parentName:"p"},"data contract"),"), defined the ",(0,o.kt)("inlineCode",{parentName:"p"},"batch job"),", created a\n",(0,o.kt)("inlineCode",{parentName:"p"},"derived stream")," with masking applied, and generated some example data."),(0,o.kt)("p",null,"Let's explore what happens to the data based on (1) the event contract and (2) derived stream we defined."),(0,o.kt)("h4",{id:"input-data"},"Input data"),(0,o.kt)("p",null,"The input data coming from the ",(0,o.kt)("inlineCode",{parentName:"p"},"DataGenerator")," class that acts as input won't surprise you:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"input data",src:a(2706).Z,width:"2204",height:"908"})),(0,o.kt)("h4",{id:"62-encrypted-data"},"6.2 Encrypted data"),(0,o.kt)("p",null,"The next step is to look at the data that is just encrypted (per field!)."),(0,o.kt)("p",null,"Basically, all connections that might exist between rows are destroyed here: we see the pii-fields ",(0,o.kt)("inlineCode",{parentName:"p"},"Email"),",\n",(0,o.kt)("inlineCode",{parentName:"p"},"PrivateFieldA")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"PrivateFieldB"),", set in our event contract, are encrypted."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"encryped data",src:a(3574).Z,width:"2234",height:"1204"})),(0,o.kt)("h4",{id:"derived-data"},"Derived Data"),(0,o.kt)("p",null,"It becomes more interesting when we take a look at the derived data (as we defined the derived stream above). Remember,\nthe goal was to apply masking instead of destroying any connection between rows that might exist."),(0,o.kt)("p",null,"Per the event contract, the derived data is allowed to contain entries with a consent level of 2 or higher. From the\ninput data we know that there are 3 entries with a consent level of 2, which correspond to the three outputs below. In\nthe table you can also see that the values for ",(0,o.kt)("inlineCode",{parentName:"p"},"UserName")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Email")," are hashed. This corresponds to the\n",(0,o.kt)("inlineCode",{parentName:"p"},"field_patterns")," that we have set in de ",(0,o.kt)("inlineCode",{parentName:"p"},"masked_fields")," section of the event contract for ",(0,o.kt)("inlineCode",{parentName:"p"},"derived_data"),". The username\nhas been masked, but the hashed username is consistent over all rows. The ",(0,o.kt)("inlineCode",{parentName:"p"},"Email")," field is different for every entry and\ntherefore the hashed field is too."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"derived data",src:a(6398).Z,width:"2210",height:"396"})),(0,o.kt)("h3",{id:"example-notebook"},"Example notebook"),(0,o.kt)("p",null,"To quickly see for yourself how Batch Mode works, copy or clone the example notebook from Github with your own S3 and\nSTRM credentials and explore the data. It also includes the batch job definition file."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/strmprivacy/demos/blob/main/strm_batch_mode_demo.ipynb"},"Get it")),(0,o.kt)("h3",{id:"in-sum-strm-batch-mode"},"In sum: STRM Batch mode"),(0,o.kt)("p",null,"So, to illustrate how to create batch jobs with privacy transformations, we took the following steps:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"We created a data connection to retrieve and store the data"),(0,o.kt)("li",{parentName:"ul"},"Defined the data contract your data adheres to."),(0,o.kt)("li",{parentName:"ul"},"We defined a batch job in the CLI"),(0,o.kt)("li",{parentName:"ul"},"Generated some data for demo purposes"),(0,o.kt)("li",{parentName:"ul"},"Explore the transformed data for downstream consumption")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://accounts.strmprivacy.io/auth/realms/users/protocol/openid-connect/registrations?client_id=console&response_type=code&scope=openid%20email&redirect_uri=https://console.strmprivacy.io/"},"Sign-up")," to try if for yourself and let us know how we can help you!"))}p.isMDXComponent=!0},2139:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/create-sink-24a4f4494d1d1d0f2ab0090e73ad6442.png"},6398:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/derived-data-588090b5f778a21b7f44d067ef593210.png"},3574:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/encrypted-data-d1a3da61db712c530acb3f6356bb4468.png"},3270:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/event-contract-541986a0193832ed757e7dc64f48c0a5.png"},2706:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/input-data-914e1107391b4add319bc98b1aaeabd8.png"},283:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/schema-example-fde3831236ae69e2390348afca5f6ec3.png"}}]);