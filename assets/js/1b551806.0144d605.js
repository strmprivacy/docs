"use strict";(self.webpackChunkend_user_docs=self.webpackChunkend_user_docs||[]).push([[6468],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return u}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),c=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(o.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,o=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),m=c(n),u=a,f=m["".concat(o,".").concat(u)]||m[u]||p[u]||l;return n?r.createElement(f,s(s({ref:t},d),{},{components:n})):r.createElement(f,s({ref:t},d))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,s=new Array(l);s[0]=m;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var c=2;c<l;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6355:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return o},metadata:function(){return c},toc:function(){return d},default:function(){return m}});var r=n(7462),a=n(3366),l=(n(7294),n(3905)),s=["components"],i={},o=void 0,c={unversionedId:"cli-reference/stream",id:"version-1.0.0/cli-reference/stream",title:"stream",description:"A stream is the central resource in STRM Privacy. Clients can connect to",source:"@site/versioned_docs/version-1.0.0/cli-reference/stream.md",sourceDirName:"cli-reference",slug:"/cli-reference/stream",permalink:"/docs/1.0.0/cli-reference/stream",tags:[],version:"1.0.0",frontMatter:{},sidebar:"docs",previous:{title:"sink",permalink:"/docs/1.0.0/cli-reference/sink"},next:{title:"usage",permalink:"/docs/1.0.0/cli-reference/usage"}},d=[{value:"create",id:"create",children:[{value:"Usage",id:"usage",children:[],level:3},{value:"Arguments",id:"arguments",children:[],level:3},{value:"Flags",id:"flags",children:[],level:3}],level:2},{value:"delete",id:"delete",children:[{value:"Usage",id:"usage-1",children:[],level:3},{value:"Arguments",id:"arguments-1",children:[],level:3},{value:"Flags",id:"flags-1",children:[],level:3}],level:2},{value:"get",id:"get",children:[{value:"Usage",id:"usage-2",children:[],level:3},{value:"Arguments",id:"arguments-2",children:[],level:3},{value:"Flags",id:"flags-2",children:[],level:3}],level:2},{value:"list",id:"list",children:[{value:"Usage",id:"usage-3",children:[],level:3},{value:"Arguments",id:"arguments-3",children:[],level:3},{value:"Flags",id:"flags-3",children:[],level:3}],level:2}],p={toc:d};function m(e){var t=e.components,n=(0,a.Z)(e,s);return(0,l.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,'A stream is the central resource in STRM Privacy. Clients can connect to\na stream to send and to receive events. A stream can be either an "input\nstream" or a "derived stream".'),(0,l.kt)("p",null,"Events are always sent to an input stream. Sending events to a derived\nstream is not possible. After validation and encryption of all PII\nfields, STRM Privacy sends all events to the input stream. Clients\nconsuming from the input stream will see all events, but with all PII\nfields encrypted."),(0,l.kt)("p",null,"Derived streams can be made on top of a input stream. A derived stream\nis configured with one or more consent levels and it only receives\nevents with matching consent levels (see details about this matching\nprocess here). The PII fields with matching consent levels are decrypted\nand sent to the derived stream. Clients connecting to the derived stream\nwill only receive the events on this stream."),(0,l.kt)("p",null,"Every stream has its own set of access tokens. Connecting to an input\nstream requires different credentials than when connecting to a derived\nstream."),(0,l.kt)("h2",{id:"create"},"create"),(0,l.kt)("p",null,"Create a new Stream."),(0,l.kt)("h3",{id:"usage"},"Usage"),(0,l.kt)("p",null,"Create a Source Stream:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"strm create stream (stream-name) [flags]\n")),(0,l.kt)("p",null,"Create a Derived Stream:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"strm create stream --derived-from=(stream-name) \\\n  [derived-name] [flags]`\n")),(0,l.kt)("h3",{id:"arguments"},"Arguments"),(0,l.kt)("p",null,"stream-name",(0,l.kt)("br",{parentName:"p"}),"\n","The name of this stream."),(0,l.kt)("p",null,"derived-name",(0,l.kt)("br",{parentName:"p"}),"\n","The name of the derived stream. This argument is ",(0,l.kt)("em",{parentName:"p"},"optional"),". When absent\nit is created deterministically from the source name, a dash and\ndash-separated consent levels."),(0,l.kt)("h3",{id:"flags"},"Flags"),(0,l.kt)("p",null,"--consent-type",(0,l.kt)("br",{parentName:"p"}),"\n",'Optional for Derived Streams: CUMULATIVE or GRANULAR (default\n"CUMULATIVE"). Ignored for source streams.'),(0,l.kt)("p",null,"--derived-from|-D",(0,l.kt)("br",{parentName:"p"}),"\n","Required for Derived Streams: name of stream that this stream is derived\nfrom"),(0,l.kt)("p",null,"--description",(0,l.kt)("br",{parentName:"p"}),"\n","The description, for human purposes only"),(0,l.kt)("p",null,"--levels|-L",(0,l.kt)("br",{parentName:"p"}),"\n","list of integers. Required for Derived Streams: Comma separated list of\nintegers for derived streams (default [])"),(0,l.kt)("p",null,"--tags",(0,l.kt)("br",{parentName:"p"}),"\n","list of strings. Optional: Tags, for human purposes only"),(0,l.kt)("p",null,"--masked-fields|-M",(0,l.kt)("br",{parentName:"p"}),"\n","repeated masking definition, consisting of\n",(0,l.kt)("inlineCode",{parentName:"p"},"<event-contract ref>:<field-pattern>[,<field-pattern>]")," See ",(0,l.kt)("a",{parentName:"p",href:"/docs/1.0.0/concepts/masked-fields"},"Masked\nFields")," for details"),(0,l.kt)("p",null,"--mask-seed",(0,l.kt)("br",{parentName:"p"}),"\n","a string seed value for the masking. See ",(0,l.kt)("a",{parentName:"p",href:"/docs/1.0.0/concepts/masked-fields"},"Masked\nFields")," for details"),(0,l.kt)("p",null,"See ",(0,l.kt)("a",{parentName:"p",href:"/docs/1.0.0/cli-reference/#global-flags"},"Global flags")," for all global flags."),(0,l.kt)("h2",{id:"delete"},"delete"),(0,l.kt)("p",null,"Delete a Stream by name."),(0,l.kt)("h3",{id:"usage-1"},"Usage"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"strm delete stream (name) [flags].\n")),(0,l.kt)("h3",{id:"arguments-1"},"Arguments"),(0,l.kt)("p",null,"name",(0,l.kt)("br",{parentName:"p"}),"\n","The name of this stream."),(0,l.kt)("h3",{id:"flags-1"},"Flags"),(0,l.kt)("p",null,"--recursive",(0,l.kt)("br",{parentName:"p"}),"\n","also delete the dependent Kafka Exporters, Batch Exporters, Key- and\nDerived Streams."),(0,l.kt)("p",null,"See ",(0,l.kt)("a",{parentName:"p",href:"/docs/1.0.0/cli-reference/#global-flags"},"Global flags"),"."),(0,l.kt)("h2",{id:"get"},"get"),(0,l.kt)("p",null,"Get a Stream by name."),(0,l.kt)("h3",{id:"usage-2"},"Usage"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"strm get stream (name) [flags]\n")),(0,l.kt)("h3",{id:"arguments-2"},"Arguments"),(0,l.kt)("p",null,"name",(0,l.kt)("br",{parentName:"p"}),"\n","The name of this stream."),(0,l.kt)("h3",{id:"flags-2"},"Flags"),(0,l.kt)("p",null,"--recursive",(0,l.kt)("br",{parentName:"p"}),"\n","also show the dependent Kafka Exporters, Batch Exporters and Derived\nStreams."),(0,l.kt)("p",null,"See ",(0,l.kt)("a",{parentName:"p",href:"/docs/1.0.0/cli-reference/#global-flags"},"Global flags"),"."),(0,l.kt)("h2",{id:"list"},"list"),(0,l.kt)("p",null,"List Streams."),(0,l.kt)("h3",{id:"usage-3"},"Usage"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"strm list streams [flags].\n")),(0,l.kt)("h3",{id:"arguments-3"},"Arguments"),(0,l.kt)("p",null,"None."),(0,l.kt)("h3",{id:"flags-3"},"Flags"),(0,l.kt)("p",null,"--recursive",(0,l.kt)("br",{parentName:"p"}),"\n","also show the dependent Kafka Exporters, Batch Exporters and Derived\nStreams."),(0,l.kt)("p",null,"See ",(0,l.kt)("a",{parentName:"p",href:"/docs/1.0.0/cli-reference/#global-flags"},"Global flags"),"."))}m.isMDXComponent=!0}}]);