"use strict";(self.webpackChunkend_user_docs=self.webpackChunkend_user_docs||[]).push([[506],{3905:function(e,t,r){r.d(t,{Zo:function(){return m},kt:function(){return d}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},m=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,s=e.originalType,c=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),p=l(r),d=a,f=p["".concat(c,".").concat(d)]||p[d]||u[d]||s;return r?n.createElement(f,i(i({ref:t},m),{},{components:r})):n.createElement(f,i({ref:t},m))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=r.length,i=new Array(s);i[0]=p;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var l=2;l<s;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},9950:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return o},contentTitle:function(){return c},metadata:function(){return l},assets:function(){return m},toc:function(){return u},default:function(){return d}});var n=r(7462),a=r(3366),s=(r(7294),r(3905)),i=["components"],o={title:"stream",hide_title:!0},c=void 0,l={unversionedId:"cli-reference/strm/create/stream",id:"cli-reference/strm/create/stream",title:"stream",description:"strm create stream",source:"@site/docs/cli-reference/strm/create/stream.md",sourceDirName:"cli-reference/strm/create",slug:"/cli-reference/strm/create/stream",permalink:"/docs/latest/cli-reference/strm/create/stream",tags:[],version:"current",frontMatter:{title:"stream",hide_title:!0},sidebar:"docs",previous:{title:"schema",permalink:"/docs/latest/cli-reference/strm/create/schema"},next:{title:"data-connector",permalink:"/docs/latest/cli-reference/strm/create/data-connector/"}},m={},u=[{value:"strm create stream",id:"strm-create-stream",level:2},{value:"Synopsis",id:"synopsis",level:3},{value:"Usage",id:"usage",level:3},{value:"Options",id:"options",level:3},{value:"Options inherited from parent commands",id:"options-inherited-from-parent-commands",level:3},{value:"SEE ALSO",id:"see-also",level:3}],p={toc:u};function d(e){var t=e.components,r=(0,a.Z)(e,i);return(0,s.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"strm-create-stream"},"strm create stream"),(0,s.kt)("p",null,"Create a stream"),(0,s.kt)("h3",{id:"synopsis"},"Synopsis"),(0,s.kt)("p",null,'A stream is the central resource in STRM Privacy. Clients can connect to a stream to send and to receive events. A\nstream can be either an "input stream" or a "derived stream".'),(0,s.kt)("p",null,"Events are always sent to an input stream. Sending events to a derived stream is not possible. After validation and\nencryption of all PII fields, STRM Privacy sends all events to the input stream. Clients consuming from the input stream\nwill see all events, but with all PII fields encrypted."),(0,s.kt)("p",null,"Derived streams can be made on top of a input stream. A derived stream is configured with one or more consent levels and\nit only receives events with matching consent levels (see details about this matching process here). The PII fields with\nmatching consent levels are decrypted and sent to the derived stream. Clients connecting to the derived stream will only\nreceive the events on this stream."),(0,s.kt)("p",null,"Every stream has its own set of access tokens. Connecting to an input stream requires different credentials than when\nconnecting to a derived stream."),(0,s.kt)("h3",{id:"usage"},"Usage"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"strm create stream [name] [flags]\n")),(0,s.kt)("h3",{id:"options"},"Options"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'      --consent-type string         CUMULATIVE or GRANULAR (default "CUMULATIVE")\n  -D, --derived-from string         name of stream that this stream is derived from\n      --description string          description\n  -h, --help                        help for stream\n  -L, --levels int32Slice           comma separated list of integers for derived streams (default [])\n      --mask-seed string            A seed used for masking\n  -M, --masked-fields stringArray   -M strmprivacy/example/1.3.0:sensitiveValue,consistentValue \\\n                                    -M strmprivacy/clickstream/1.0.0:sessionId\n                                    \n                                    Masks fields values in the output stream via hashing.\n                                        \n      --save                        if true, save the result in the config directory (~/.config/strmprivacy/saved-entities). (default is true) (default true)\n      --tags strings                tags\n')),(0,s.kt)("h3",{id:"options-inherited-from-parent-commands"},"Options inherited from parent commands"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'      --api-auth-url string            User authentication host (default "https://accounts.strmprivacy.io")\n      --api-host string                API host and port (default "api.strmprivacy.io:443")\n      --events-auth-url string         Event authentication host (default "https://sts.strmprivacy.io")\n      --kafka-bootstrap-hosts string   Kafka bootstrap brokers, separated by comma (default "export-bootstrap.kafka.strmprivacy.io:9092")\n  -o, --output string                  Output format [json, json-raw, table, plain] (default "table")\n      --token-file string              Token file that contains an access token (default is $HOME/.config/strmprivacy/credentials-<api-auth-url>.json)\n      --web-socket-url string          Websocket to receive events from (default "wss://websocket.strmprivacy.io/ws")\n')),(0,s.kt)("h3",{id:"see-also"},"SEE ALSO"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/docs/latest/cli-reference/strm/create/"},"strm create"),"\t - Create an entity")))}d.isMDXComponent=!0}}]);