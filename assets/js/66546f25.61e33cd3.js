"use strict";(self.webpackChunkend_user_docs=self.webpackChunkend_user_docs||[]).push([[2860,7918],{8573:(e,t,a)=>{a.d(t,{Z:()=>c});var n=a(7294),r=a(814),i=a(1262);const l=new RegExp("^v\\d+\\.\\d+\\.\\d+$");function s(e,t,a){return a.includes(e)?"":"<"+t.toUpperCase().replaceAll(/(?:^\s?|\s*?[.!?]+$|[()])/g,"").replaceAll(/\s/g,"_")+">"}function o(e,t){if(e.download){const a=new Blob([t],{type:"text/plain"});return n.createElement("div",{className:"code-block-footer-download"},n.createElement("a",{target:"_blank",href:window.URL.createObjectURL(a),download:e.download},"Download file"))}return n.createElement(n.Fragment,null)}function c(e){let{children:t,...a}=e;if(a.placeholders){let{metaStringBeforePlaceholderMarker:e,metaStringAfterPlaceholderMarker:c,emptyPlaceholders:u}=function(e){let[t,a]=e.metastring.split(/\s?placeholders\s/),n=[];if(a.includes("empty_placeholders")){const e=new RegExp("(?:empty_placeholders)=(.*?)\\s(.*)","g").exec(a);e.length>1&&(n+=e[1].split(","),a=e[2])}return{metaStringBeforePlaceholderMarker:t,metaStringAfterPlaceholderMarker:a,emptyPlaceholders:n}}(a),d=Object.fromEntries(c.replaceAll(/,\s?/g,",").split(",").map((e=>e.split("="))).map((e=>{let[t,a]=e;return[t,{description:a,inputPlaceholder:s(t,a,u),isExternalData:a.startsWith("https://"),fetched:!1}]}))),p=function(e,t,a){let n={...e};return Object.entries(e).forEach((e=>{let[a,r]=e;t.includes(a)&&delete n[a]})),n.metastring=a,n.className=n.className+" with-footer",n}(a,c,e),{placeholderValues:h,handleChange:m}=function(e){let t=Object.fromEntries(Object.entries(e).map((e=>{let[t,a]=e;return a.isExternalData?[t,{value:"<FETCHING>",fetched:!1}]:[t,{value:a.inputPlaceholder,fetched:!0}]}))),[a,r]=(0,n.useState)(t);const i=(e,t)=>{let n={...a};delete n[e],n[e]={value:t.target.value,fetched:!0},r({...n})};return Object.entries(e).filter((e=>{let[t,a]=e;return a.isExternalData})).sort(((e,t)=>{let[a,n]=e,[r,i]=t;return a.localeCompare(r)})).map((e=>{let[t,r]=e;(0,n.useEffect)((()=>{if(!a[t].fetched){const[e,a]=r.description.split("#");fetch(e).then((e=>e.json())).then((e=>e[a])).then((e=>null!=e.match(l)?e.substring(1):e)).then((e=>{i(t,{target:{value:e}})}))}}))})),{placeholderValues:a,handleChange:i}}(d),k=function(e,t,a,r){let i=[];return Object.entries(t).filter((e=>{let[t,a]=e;return!a.isExternalData})).forEach((l=>{let[s,o]=l;const c=a[s].value===o.inputPlaceholder?"":a[s].value,u="$"+s;let d=null!=e.match(new RegExp("\\"+u+"\\b"));i.push(n.createElement("div",{className:"code-block-placeholder",key:s},n.createElement("label",{className:"code-block-placeholder-element",for:"placeholder-"+s},n.createElement("b",null,t[s].description),n.createElement("input",{type:"text",className:"code-block-placeholder-element",id:"placeholder-"+s,placeholder:d?o.inputPlaceholder:"Unused placeholder. Use it with "+u+" in the code block.",disabled:!d,value:c,onChange:e=>r(s,e)}))))})),i}(t,d,h,m),f=function(e,t,a){let n=e;return Object.entries(t).forEach((e=>{let[t,r]=e;const i="$"+t;if(n.includes(i)){const e=0===r.value.length?a[t].inputPlaceholder:r.value;n=n.replaceAll(i,e)}})),n}(t,h,d);return n.createElement(n.Fragment,null,n.createElement(r.Z,p,f),n.createElement(i.Z,{fallback:n.createElement("div",null,"Loading...")},(()=>n.createElement("div",{className:"code-block-footer"},n.createElement("p",null,n.createElement("b",null,"Placeholders")),n.createElement("div",{className:"code-block-placeholder-footer"},k),o(a,f)))))}if(a.download){let e={...a};return e.className=e.className+" with-footer",n.createElement(n.Fragment,null,n.createElement(r.Z,e,t),n.createElement(i.Z,{fallback:n.createElement("div",null,"Loading...")},(()=>n.createElement("div",{className:"code-block-footer"},o(a,t)))))}return n.createElement(n.Fragment,null,n.createElement(r.Z,a,t))}},4677:(e,t,a)=>{a.d(t,{i:()=>s});var n=a(7294),r=a(8573),i=a(1262);const l=e=>{let[t,a]=(0,n.useState)("");return(0,n.useEffect)((()=>{var t;(t=e.url,fetch(t).then((e=>e.text()))).then((e=>{a(e)}))}),[e.url]),n.createElement(r.Z,{language:e.lang,title:e.title},t)},s=e=>n.createElement(i.Z,{fallback:n.createElement("div",null,"Loading...")},(()=>n.createElement(l,e)))},9458:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>l,metadata:()=>o,toc:()=>u});var n=a(7462),r=(a(7294),a(3905)),i=(a(8573),a(4677));const l={title:"Authenticated Kafka",hide_table_of_contents:!1,description:"Configure your Data Plane with authenticated Kafka."},s=void 0,o={unversionedId:"quickstart/ccd/authenticated",id:"quickstart/ccd/authenticated",title:"Authenticated Kafka",description:"Configure your Data Plane with authenticated Kafka.",source:"@site/docs/03-quickstart/04-ccd/06-authenticated.md",sourceDirName:"03-quickstart/04-ccd",slug:"/quickstart/ccd/authenticated",permalink:"/docs/latest/quickstart/ccd/authenticated",draft:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{title:"Authenticated Kafka",hide_table_of_contents:!1,description:"Configure your Data Plane with authenticated Kafka."},sidebar:"docs",previous:{title:"Metrics and Monitoring",permalink:"/docs/latest/quickstart/ccd/monitoring"},next:{title:"Upgrading",permalink:"/docs/latest/quickstart/ccd/updating"}},c={},u=[{value:"Using an existing Kafka cluster over TLS, with SASL/Plain authentication",id:"tls-sasl-plain",level:2},{value:"TLS truststore",id:"tls-truststore",level:3},{value:"Authentication",id:"authentication",level:3},{value:"<code>values.yaml</code>",id:"valuesyaml",level:3},{value:"Kafka Security Config",id:"kafka-security-config",level:4},{value:"Authentication",id:"authentication-1",level:4},{value:"Authorization",id:"authorization",level:4},{value:"Installing",id:"installing",level:3},{value:"Troubleshooting",id:"troubleshooting",level:4},{value:"Trying again",id:"trying-again",level:3}],d={toc:u};function p(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"tls-sasl-plain"},"Using an existing Kafka cluster over TLS, with SASL/Plain authentication"),(0,r.kt)("p",null,"This hands-on session shows how to get up-and-running with your Customer Cloud Deployment using an ",(0,r.kt)("em",{parentName:"p"},"authenticated Kafka\nCluster")," that uses ",(0,r.kt)("a",{parentName:"p",href:"https://docs.confluent.io/platform/current/kafka/authentication_sasl/authentication_sasl_plain.html"},"SASL/PLAIN over TLS")," authentication."),(0,r.kt)("p",null,"It's probably a good idea to first run the getting started with the unauthenticated demo Kafka detailed in\nthe ",(0,r.kt)("a",{parentName:"p",href:"/docs/latest/quickstart/ccd/self-hosted"},"self-hosted section")," to make sure you have all the tools configured correctly and understand how\nit should work."),(0,r.kt)("h3",{id:"tls-truststore"},"TLS truststore"),(0,r.kt)("p",null,"In order for our Kafka clients to interact with your Kafka brokers over TLS, they'll have to trust them. This goes via\n",(0,r.kt)("a",{parentName:"p",href:"https://docs.confluent.io/platform/current/kafka/encryption.html#kafka-ssl-encryption"},"a truststore"),". A truststore is an encrypted file that the Kafka clients have to use in order to trust the\nbroker. You'll have to generate one as described in the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.confluent.io/platform/current/security/security_tutorial.html#generating-keys-certs"},"Confluent documentation"),", and put the generated\nvalue in a Kubernetes secret. The truststore has a password to protect it. You must add this password to the Kubernetes\nsecret also."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"kubectl create secret generic client-truststore-jks \\\n  --from-file=client.truststore.jks=<your-truststore-jks-file> \\\n  --from-literal=truststore.password=<your-truststore-password>\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"don't change the ",(0,r.kt)("inlineCode",{parentName:"p"},"client.truststore.jks")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"truststore.password")," keys. These names are being used by the various\nKubernetes\ndeployments to retrieve the entities.")),(0,r.kt)("p",null,"Once this secret exists and has been made available to the Kafka clients inside the STRM ecosystem, these clients can\ncommunicate securely with the Kafka brokers."),(0,r.kt)("h3",{id:"authentication"},"Authentication"),(0,r.kt)("p",null,"Currently we only support ",(0,r.kt)("a",{parentName:"p",href:"https://docs.confluent.io/platform/current/kafka/authentication_sasl/authentication_sasl_plain.html"},"SASL/PLAIN")," authentication; this is a username/password scheme, where the\nKafka cluster has a list of pairs that it accepts. The communication is ",(0,r.kt)("em",{parentName:"p"},"plain text")," but since the channel is TLS\nencrypted, this can not be intercepted."),(0,r.kt)("h3",{id:"valuesyaml"},(0,r.kt)("inlineCode",{parentName:"h3"},"values.yaml")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"values.yaml")," file you download from the ",(0,r.kt)("a",{parentName:"p",href:"https://console.strmprivacy.io"},"console")," adds a ",(0,r.kt)("inlineCode",{parentName:"p"},"kafka.enabled: true")," override, so the helm chart\nwill actually deploy a Kafka instance inside your k8s namespace. Make sure you have in your ",(0,r.kt)("inlineCode",{parentName:"p"},"values.yaml")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"kafka:\n  enabled: false\n  # you could have multiple separated with a comma\n  bootstrapServers: <your-kafka-broker>:<port>\n")),(0,r.kt)("p",null,"Configuring the credentials is done in two parts."),(0,r.kt)("h4",{id:"kafka-security-config"},"Kafka Security Config"),(0,r.kt)("p",null,"The top-level ",(0,r.kt)("inlineCode",{parentName:"p"},"kafkaSecurityConfig")," section defines how to configure the TLS connection"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'kafkaSecurityConfig:\n  enabled: true\n  securityProtocol: "SASL_SSL"\n  sslTruststoreSecretName: "client-truststore-jks" # use k8s secret name you created.\n')),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"You can omit the ",(0,r.kt)("inlineCode",{parentName:"p"},"sslTruststoreSecretName")," if you used the default ",(0,r.kt)("inlineCode",{parentName:"p"},"client-truststore-jks")," name for the secret.")),(0,r.kt)("h4",{id:"authentication-1"},"Authentication"),(0,r.kt)("p",null,"The various parts of STRM that interact with Kafka all have to be given a principal name and password. This has to be\ndone in\nthe individual Helm override sections. The ",(0,r.kt)("inlineCode",{parentName:"p"},"user/password")," pairs have to be created in your Kafka broker configuration.\nIn the little sample below, Trivial identities have been added for the various components. You could use the principal one\nfor\nevery one of them, but they must be defined separately."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:"showLineNumbers",showLineNumbers:!0},"components:\n  eventGateway:\n    configuration:\n      kafkaAuth:\n        user: strm-event-gateway\n        password: strmprivacy\n  webSocket:\n    configuration:\n      kafkaAuth:\n        user: strm-web-socket\n        password: strmprivacy\n  batchExportersAgent:\n    configuration:\n      kafkaAuth:\n        user: strm-batch-exporter\n        password: strmprivacy\n  streamsAgent:\n    configuration:\n      kafkaAuth:\n        user: strm-streams-agent\n        password: strmprivacy\n  esrProxy:\n    configuration:\n      kafkaAuth:\n        user: strm-esr-proxy\n        password: strmprivacy\n  decrypterConfig:\n    configuration:\n      kafkaAuth:\n        user: strm-decrypter\n        password: strmprivacy\n  batchExporterConfig:\n    configuration:\n      kafkaAuth:\n        user: strm-batch-exporter\n        password: strmprivacy\n")),(0,r.kt)("h4",{id:"authorization"},"Authorization"),(0,r.kt)("p",null,"We assume that once authorized, the entity has the permissions it needs. In case you have fine-grained authorization via\nRBAC or ACLs on the Kafka cluster, the following permissions are required:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"event-gateway")," needs topic write rights to topics in the cluster whose name starts with ",(0,r.kt)("inlineCode",{parentName:"li"},"stream-")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"keys-")," and a\ntopic named ",(0,r.kt)("inlineCode",{parentName:"li"},"billing")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"streams-agent")," needs topic admin rights to create and delete and inspect topics. It will create topics whose name\nstarts with ",(0,r.kt)("inlineCode",{parentName:"li"},"stream-")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"keys-")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"web-socket")," needs topic consume rights to topics starting with ",(0,r.kt)("inlineCode",{parentName:"li"},"stream-"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"batch-exporters-agent")," needs topic consume rights to topics starting with ",(0,r.kt)("inlineCode",{parentName:"li"},"stream-")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"keys-"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"esr-proxy")," needs topic consume rights to a topic named ",(0,r.kt)("inlineCode",{parentName:"li"},"billing"))),(0,r.kt)("h3",{id:"installing"},"Installing"),(0,r.kt)("p",null,"Once you have created the ",(0,r.kt)("inlineCode",{parentName:"p"},"values.yaml")," as described above, you can"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"helm install strmprivacy strmrepo/strm --values values.yaml\n")),(0,r.kt)("p",null,"and follow along with the ",(0,r.kt)("a",{parentName:"p",href:"#interacting"},"Interacting with the CCD Cluster")," section."),(0,r.kt)("h4",{id:"troubleshooting"},"Troubleshooting"),(0,r.kt)("p",null,"It is ",(0,r.kt)("em",{parentName:"p"},"highly likely")," that this won't go correctly the first try. Setting up the TLS can go wrong in many ways, from the\ntrivial (missing secret), to the painful (reverse hostname verification doesn't work). The logging of deployments like\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"streams-agent")," or the ",(0,r.kt)("inlineCode",{parentName:"p"},"event-gateway")," will probably give a clue what's going on."),(0,r.kt)("p",null,"Troubleshooting with a Kafka test-client."),(0,r.kt)("p",null,"Use this Kubernetes manifest to interact with the Kafka cluster."),(0,r.kt)(i.i,{url:"https://raw.githubusercontent.com/strmprivacy/data-plane-helm-chart/master/test-utils/kafka-tls-client.yaml",title:"kafka-tls-client.yaml",lang:"yaml",mdxType:"ExternalCodeBlock"}),(0,r.kt)("p",null,"Modify the ",(0,r.kt)("inlineCode",{parentName:"p"},"client.props")," section to use your credentials (the truststore password and the principal username/password\npair)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-properties",metastring:"showLineNumbers",showLineNumbers:!0},'  client.props: |\n    security.protocol=SASL_SSL\n    ssl.truststore.location=/tmp/truststore/client.truststore.jks\n    ssl.truststore.password=strmprivacy\n    sasl.mechanism=PLAIN\n    sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required     username="strm-event-gateway"     password="strmprivacy";\n')),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"make sure you keep the ",(0,r.kt)("inlineCode",{parentName:"p"},"sasl.jaas.config")," on one line and don't forget the semi-colon at the end!")),(0,r.kt)("p",null,"You can now interact with the Kafka cluster from within the pod."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ kubectl apply -f kafka-tls-test-client\n$ kubectl exec -ti kafka-tls-test-client-... -- bash\n\n$ kafka-topics.sh --bootstrap-server <your-bootstrap-server> --list \\\n     --command-config /tmp/client.props\n__consumer_offsets\nbilling\nkeys-28a3152d-f6c8-4c52-8bd7-c587089938eb\nkeys-35bc9088-c41c-41de-b042-fa835a4cb3b1\nstream-28a3152d-f6c8-4c52-8bd7-c587089938eb\nstream-35bc9088-c41c-41de-b042-fa835a4cb3b1\nstream-e00843bd-86c8-4b85-a1bd-b7b509fc6804\n")),(0,r.kt)("h3",{id:"trying-again"},"Trying again"),(0,r.kt)("p",null,"If you've made mistakes and want to start over:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"helm uninstall strmprivacy --namespace strmprivacy")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"kubectl delete ns strmprivacy")," kills everything\n(including the k8s namespace). Don't forget to recreate the\nnamespace afterwards.")))}p.isMDXComponent=!0}}]);