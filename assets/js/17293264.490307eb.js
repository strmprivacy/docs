"use strict";(self.webpackChunkend_user_docs=self.webpackChunkend_user_docs||[]).push([[7417],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=l(n),u=r,h=m["".concat(c,".").concat(u)]||m[u]||d[u]||i;return n?a.createElement(h,s(s({ref:t},p),{},{components:n})):a.createElement(h,s({ref:t},p))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=m;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var l=2;l<i;l++)s[l]=n[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1846:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var a=n(7462),r=(n(7294),n(3905));const i={title:"Sending and receiving manually",hide_table_of_contents:!1},s=void 0,o={unversionedId:"quickstart/streaming/sending-data/sending-curl",id:"quickstart/streaming/sending-data/sending-curl",title:"Sending and receiving manually",description:"This quickstart aims to clarify how to send and receive data to STRM Privacy",source:"@site/docs/03-quickstart/01-streaming/03-sending-data/02-sending-curl.md",sourceDirName:"03-quickstart/01-streaming/03-sending-data",slug:"/quickstart/streaming/sending-data/sending-curl",permalink:"/docs/latest/quickstart/streaming/sending-data/sending-curl",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Sending and receiving manually",hide_table_of_contents:!1},sidebar:"docs",previous:{title:"Language Examples",permalink:"/docs/latest/quickstart/streaming/sending-data/language-examples"},next:{title:"Receiving Data",permalink:"/docs/latest/quickstart/streaming/receiving-data/"}},c={},l=[],p={toc:l};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This quickstart aims to clarify how to send and receive data to STRM Privacy\nwith the Avro serialization wire format, without any STRM Privacy\nspecific code."),(0,r.kt)("p",null,"STRM Privacy uses ",(0,r.kt)("em",{parentName:"p"},"standard")," open-source formats (like Avro and\nJSON-schema), authentication systems (OAuth2.0) and transport layers\n(HTTP/2 and websocket and gRPC)."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"This quickstart uses both cURL and ",(0,r.kt)("a",{parentName:"p",href:"https://httpie.io/"},"httpie"),", which often is easier to use.")),(0,r.kt)("p",null,"First create a stream."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'$ strm create stream by-hand --save\n{\n  "ref": {\n    "name": "by-hand",\n    "projectId": "30fcd008-9696-...."\n  },\n  "enabled": true,\n  "limits": {\n    "eventRate": "999999",\n    "eventCount": "999999999"\n  },\n  "credentials": [\n    {\n      "clientId": "stream-w0qu00hwl644b...",\n      "clientSecret": "OygfdpwBqoekL..."\n      "projectId": "30fcd008-9696-...."\n    }\n  ],\n  "masked_fields" : {}\n}\n')),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Use ",(0,r.kt)("a",{parentName:"p",href:"/docs/latest/quickstart/streaming/receiving-data/listen-web-socket"},"strm listen web-socket by-hand")," to get\nsome feedback on the events you're sending.")),(0,r.kt)("p",null,"Request an OAuth 2.0 access token with\nthe ",(0,r.kt)("a",{parentName:"p",href:"https://oauth.net/2/grant-types/client-credentials/"},"Client Credentials Grant"),"\nthat you need for sending events to a certain stream. In the code block below, the user (",(0,r.kt)("inlineCode",{parentName:"p"},"-u"),") is configured as\n",(0,r.kt)("inlineCode",{parentName:"p"},"clientId:clientSecret"),". This translates into an ",(0,r.kt)("inlineCode",{parentName:"p"},"Authorization: Basic <base64 encoded username + password>")," header."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'accessToken=$(curl -X POST -u "stream-w0qu00hwl644b...:OygfdpwBqoekL..." \\\n  -d "grant_type=client_credentials" \\\n  "https://accounts.strmprivacy.io/auth/realms/streams/protocol/openid-connect/token" | jq -r .access_token)\n')),(0,r.kt)("p",null,"You can inspect the resulting ",(0,r.kt)("inlineCode",{parentName:"p"},"accessToken")," in ",(0,r.kt)("a",{parentName:"p",href:"https://jwt.io"},"jwt.io")," to\nsee what is stored inside the claims."),(0,r.kt)("p",null,"With help of ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/confluentinc/avro-random-generator"},"this\ntool"),", it's possible to easily generate some random data for the\n",(0,r.kt)("a",{parentName:"p",href:"https://console.strmprivacy.io/schemas/"},"clickstream")," demo schema."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json with-footer",metastring:"showLineNumbers title=demo.json class=with-footer",showLineNumbers:!0,title:"demo.json"},'{\n  "strmMeta": {\n    "eventContractRef": "strmprivacy/clickstream/1.0.0",\n    "consentLevels": [0]\n  },\n  "producerSessionId": "producer",\n  "url": "https://www.strmprivacy.io",\n  "eventType": "click",\n  "referrer": "referrer-id",\n  "userAgent": "user-agent",\n  "conversion": 0,\n  "customer": {\n    "id": "customer-id"\n  },\n  "abTests": ["a", "b"]\n}\n')),(0,r.kt)("div",{class:"codeblock-footer"},(0,r.kt)("a",{target:"_blank",href:"pathname:///files/demo.json",download:!0},"Download file")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"This is the JSON serialization format of Avro. The client drivers use\nthe ",(0,r.kt)("strong",{parentName:"p"},"much faster")," and more compact Avro binary format.")),(0,r.kt)("p",null,"To use the random data and send it to the ",(0,r.kt)("inlineCode",{parentName:"p"},"/event")," endpoint:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cat demo.json | http post https://events.strmprivacy.io/event\\\n  authorization:\"Bearer $accessToken\" \\\n  Strm-Schema-Ref:strmprivacy/clickstream/1.0.0\n\nHTTP/1.1 400 Bad Request\n\nField: 'url' in event with schema: 'strmprivacy/clickstream/1.0.0' with value: 'url'\n  doesn't match regex: '^(https?|ftp|file)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|]'\n")),(0,r.kt)("p",null,"This is ",(0,r.kt)("em",{parentName:"p"},"as expected"),". STRM Privacy gives an indication that a\nvalidation failed. This is an example of the mechanism that STRM Privacy\nprovides to indicate to the ",(0,r.kt)("em",{parentName:"p"},"data producers")," that their data does not\nconform to the rules of the Data Contract."),(0,r.kt)("p",null,"Modify the ",(0,r.kt)("inlineCode",{parentName:"p"},"url")," field in ",(0,r.kt)("inlineCode",{parentName:"p"},"demo.json")," to become any valid url (like\n",(0,r.kt)("inlineCode",{parentName:"p"},"https://strmprivacy.io"),", and try to send it again:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'cat demo.json | http post https://events.strmprivacy.io/event\\\n  authorization:"Bearer $accessToken" \\\n  Strm-Schema-Ref:strmprivacy/clickstream/1.0.0\nHTTP/1.1 204 No Content\n')),(0,r.kt)("p",null,"The HTTP status code ",(0,r.kt)("inlineCode",{parentName:"p"},"204")," is returned by the Event Gateway when the event\nhas been accepted and processed."),(0,r.kt)("h1",{id:"curl-instead-of-httpie"},"cURL instead of httpie"),(0,r.kt)("p",null,"When using ",(0,r.kt)("inlineCode",{parentName:"p"},"curl")," instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"httpie")," it is possible to observe the\nHTTP/2 response, indicating the use of HTTPS/2 with its much higher\nthroughput."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl -v https://events.strmprivacy.io/event \\\n    -H "authorization: Bearer $accessToken" \\\n    -H "Strm-Schema-Ref:strmprivacy/clickstream/1.0.0" --data-binary @demo.json\n\n...\n* Using HTTP2, server supports multiplexing\n* Connection state changed (HTTP/2 confirmed)\n...\n> POST /event HTTP/2\n> Host: events.strmprivacy.io\n...\n> Strm-Schema-Ref:strmprivacy/clickstream/1.0.0\n> content-length: 434\n>\n...\n< HTTP/2 204\n')),(0,r.kt)("h1",{id:"decrypting-data"},"Decrypting data"),(0,r.kt)("p",null,"First, create a decrypted stream:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'strm create stream --derived-from by-hand --levels 2 --save\n{\n  "ref": { "name": "by-hand-2", "projectId": "30fcd008-9696-...." },\n  "consentLevels": [ 2 ],\n  "consentLevelType": "CUMULATIVE",\n  "enabled": true,\n  "linkedStream": "by-hand",\n  "credentials": [\n    { "clientId": "hx7hj7w5mwkbybdrwhale1hvq0r6qk",\n      "clientSecret": "#Fs4DkVtJh(2uss#062hGuzTLW9u5t",\n      "projectId": "30fcd008-9696-...."\n    }\n  ]\n}\n')),(0,r.kt)("p",null,"Send an event as described above with cURL or httpie. Observe the\ndecrypted attributes in the events received from the web-socket."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'$ strm listen web-socket by-hand-2\n\n{\n  "strmMeta": {\n    "eventContractRef": "strmprivacy/example/1.3.0",\n    "nonce": 15082564,\n    "timestamp": 1629192833072,\n    "keyLink": "55c2f72b-cff8-4814-ae33-e125c77e50f9",\n    "consentLevels": [ 0, 1, 2, 3 ]\n  },\n  "uniqueIdentifier": "unique-14",\n  "consistentValue": "session-740",\n  "someSensitiveValue": "ASB9bJrnYjxjNF5Txc+Wc2k1zvzFAmE03SYK499WK5Du",\n  "notSensitiveValue": "not-sensitive-39"\n}\n')),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"That most fields are decrypted, but the ",(0,r.kt)("inlineCode",{parentName:"p"},"someSensitiveValue")," field\n",(0,r.kt)("strong",{parentName:"p"},"not"),", is because of consent level 3 (see the data contract). If\nthe event had not contained ",(0,r.kt)("inlineCode",{parentName:"p"},"2")," in its consent levels, we wouldn't even\nhave seen the event in this decrypted stream. Read more on field\ndecryption ",(0,r.kt)("a",{parentName:"p",href:"/docs/latest/concepts/data-processing/pii-field-encryption#consent-level-types"},"here"),".")),(0,r.kt)("p",null,"And finally, to clean up the resources:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"strm delete stream by-hand --recursive\n\n# note that everything that has been deleted is returned from this call.\n")),(0,r.kt)("h1",{id:"receiving-from-the-websocket-without-the-strm-cli"},"Receiving from the websocket without the strm cli."),(0,r.kt)("p",null,"If you want to retrieve json serialized events ",(0,r.kt)("em",{parentName:"p"},"without using the strm\nlisten web-socket tool"),", follow ",(0,r.kt)("a",{parentName:"p",href:"/docs/latest/quickstart/streaming/receiving-data/listen-web-socket#wscat"},"these\nsteps"),"."))}d.isMDXComponent=!0}}]);