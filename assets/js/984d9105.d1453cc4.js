"use strict";(self.webpackChunkend_user_docs=self.webpackChunkend_user_docs||[]).push([[4730],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=s(n),m=a,f=d["".concat(c,".").concat(m)]||d[m]||p[m]||o;return n?r.createElement(f,l(l({ref:t},u),{},{components:n})):r.createElement(f,l({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var s=2;s<o;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},603:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return u},default:function(){return d}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),l=["components"],i={},c=void 0,s={unversionedId:"cli-reference/schema-code",id:"version-1.0.0/cli-reference/schema-code",title:"schema-code",description:"In order to simplify sending correctly serialized data to STRM Privacy",source:"@site/versioned_docs/version-1.0.0/cli-reference/schema-code.md",sourceDirName:"cli-reference",slug:"/cli-reference/schema-code",permalink:"/docs/1.0.0/cli-reference/schema-code",tags:[],version:"1.0.0",frontMatter:{},sidebar:"docs",previous:{title:"schema",permalink:"/docs/1.0.0/cli-reference/schema"},next:{title:"simulate",permalink:"/docs/1.0.0/cli-reference/simulate"}},u=[{value:"get",id:"get",children:[{value:"Usage",id:"usage",children:[],level:3},{value:"Arguments",id:"arguments",children:[],level:3},{value:"Flags",id:"flags",children:[],level:3},{value:"Example",id:"example",children:[],level:3}],level:2}],p={toc:u};function d(e){var t=e.components,n=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"In order to simplify sending correctly serialized data to STRM Privacy\nit is recommended to use generated source code that defines a\nclass/object structure in a certain programming language, that knows\n(with help of some open-source libraries) how to serialize objects."),(0,o.kt)("p",null,"The result of a ",(0,o.kt)("inlineCode",{parentName:"p"},"get schema-code")," is a zip file with some source code\nfiles for getting started with sending events in a certain programming\nlanguage. Generally this will be code where you\u2019ll have to do some sort\nof ",(0,o.kt)("inlineCode",{parentName:"p"},"build")," step in order to make this fully operational in your\ndevelopment setting (using a JDK, a Python or a Node.js environment)."),(0,o.kt)("h2",{id:"get"},"get"),(0,o.kt)("p",null,"Get Source code for a certain schema."),(0,o.kt)("h3",{id:"usage"},"Usage"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"strm get schema-code (schema) --language=(language)\n")),(0,o.kt)("h3",{id:"arguments"},"Arguments"),(0,o.kt)("p",null,"schema",(0,o.kt)("br",{parentName:"p"}),"\n","handle/name/version of the schema"),(0,o.kt)("h3",{id:"flags"},"Flags"),(0,o.kt)("p",null,"--language",(0,o.kt)("br",{parentName:"p"}),"\n","programming language. Currently python, java and typescript."),(0,o.kt)("p",null,"--output-file",(0,o.kt)("br",{parentName:"p"}),"\n","a file name to write the zip-file to."),(0,o.kt)("p",null,"--overwrite",(0,o.kt)("br",{parentName:"p"}),"\n","boolean. Allow overwriting an existing zip file."),(0,o.kt)("p",null,"Dont forget to check ",(0,o.kt)("inlineCode",{parentName:"p"},"strm get schema-code --help")," to see if new\nlanguages have been added."),(0,o.kt)("p",null,"See ",(0,o.kt)("a",{parentName:"p",href:"/docs/1.0.0/cli-reference/#global-flags"},"Global flags")," for all global flags."),(0,o.kt)("h3",{id:"example"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"strm get schema-code strmprivacy/demo/1.0.2 --language=python\nSaved to python-avro-demo-1.0.2.zip\n")))}d.isMDXComponent=!0}}]);