"use strict";(self.webpackChunkend_user_docs=self.webpackChunkend_user_docs||[]).push([[6589],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return u}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),m=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=m(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,s=e.originalType,l=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),c=m(n),u=i,h=c["".concat(l,".").concat(u)]||c[u]||p[u]||s;return n?a.createElement(h,r(r({ref:t},d),{},{components:n})):a.createElement(h,r({ref:t},d))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=n.length,r=new Array(s);r[0]=c;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:i,r[1]=o;for(var m=2;m<s;m++)r[m]=n[m];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},1195:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return l},metadata:function(){return m},assets:function(){return d},toc:function(){return p},default:function(){return u}});var a=n(7462),i=n(3366),s=(n(7294),n(3905)),r=["components"],o={title:"Masked Fields",hide_table_of_contents:!1},l="Masked Fields",m={unversionedId:"concepts/masked-fields",id:"concepts/masked-fields",title:"Masked Fields",description:"Field masking is a mechanism that is applied to events in derived",source:"@site/docs/concepts/masked-fields.md",sourceDirName:"concepts",slug:"/concepts/masked-fields",permalink:"/docs/latest/concepts/masked-fields",tags:[],version:"current",frontMatter:{title:"Masked Fields",hide_table_of_contents:!1},sidebar:"docs",previous:{title:"the strmMeta section",permalink:"/docs/latest/concepts/strm-meta"},next:{title:"Simple Schemas",permalink:"/docs/latest/concepts/simple-schemas"}},d={},p=[{value:"An example",id:"an-example",level:2},{value:"the privacy stream events",id:"the-privacy-stream-events",level:3},{value:"the derived stream events with no masking",id:"the-derived-stream-events-with-no-masking",level:3},{value:"the derived stream events <strong>with</strong> masking",id:"the-derived-stream-events-with-masking",level:3},{value:"Using the masked fields",id:"using-the-masked-fields",level:2},{value:"The seed.",id:"the-seed",level:2}],c={toc:p};function u(e){var t=e.components,n=(0,i.Z)(e,r);return(0,s.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"masked-fields"},"Masked Fields"),(0,s.kt)("p",null,"Field masking is a mechanism that is applied to events in derived\nstreams in order to hide their actual plaintext value."),(0,s.kt)("p",null,"Imagine you have a privacy stream in your company that contains a\ncustomer id. This ",(0,s.kt)("em",{parentName:"p"},"personal data")," field will be encrypted in the privacy\nstream, but in case the data owner (the customer) has given permission,\nteams (or algorithms) can be used for instance to give personalized\nrecommendations."),(0,s.kt)("p",null,"Without the masking mechanism this would mean that for a certain\ncustomer that has given full permissions for instance the personal\nhistory would be fully visible within the recommendations team or\nmodels. ",(0,s.kt)("em",{parentName:"p"},"The data scientist would be able to look up someones personal\nhistory, when having access to the company customer database"),"."),(0,s.kt)("p",null,"We can do better!"),(0,s.kt)("p",null,"In order to hide the actual customer id, we created a ",(0,s.kt)("em",{parentName:"p"},"masked field"),"\nmechanism. This mechanism applies a masking function ",(0,s.kt)("sup",{parentName:"p",id:"fnref-1"},(0,s.kt)("a",{parentName:"sup",href:"#fn-1",className:"footnote-ref"},"1"))," on the\ndecrypted field value, before putting it into the derived stream. This\nmasking function is ",(0,s.kt)("em",{parentName:"p"},"deterministic")," so a decrypted field value will\nalways map to the same masked field value. The same data scientist and\nthe same recommender model can work with the customer data ",(0,s.kt)("em",{parentName:"p"},"just as\neffectively"),", but without being able to link this to a person."),(0,s.kt)("h2",{id:"an-example"},"An example"),(0,s.kt)("p",null,"I\u2019ve created a source stream ",(0,s.kt)("inlineCode",{parentName:"p"},"example")," and two derived streams:\n",(0,s.kt)("inlineCode",{parentName:"p"},"example-3")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"example-M3"),". I\u2019m running\n",(0,s.kt)("inlineCode",{parentName:"p"},"strm simulate random-events example")," to generate some data."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"strm create stream example\nstrm create stream --derived-from example \\ \n  --levels 3 --masked-fields \\\n    strmprivacy/example/1.3.0:uniqueIdentifier,notSensitiveValue,someSensitiveValue,consistentValue \n  --mask-seed=hi-there \nstrm create stream --derived-from example --levels 3 \n")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"creates stream named ",(0,s.kt)("inlineCode",{parentName:"p"},"example-M3")," because we didn\u2019t provide an\nexplicit derived stream name.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"for events with contract strmprivacy/example/1.3.0 mask fields\n",(0,s.kt)("inlineCode",{parentName:"p"},"uniqueIdentifier"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"notSensitiveValue"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"someSensitiveValue")," and\n",(0,s.kt)("inlineCode",{parentName:"p"},"consistentValue"),".")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"The ",(0,s.kt)("inlineCode",{parentName:"p"},"mask-seed")," attribute is explained below.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"creates stream named ",(0,s.kt)("inlineCode",{parentName:"p"},"example-3")))),(0,s.kt)("h3",{id:"the-privacy-stream-events"},"the privacy stream events"),(0,s.kt)("p",null,"One event in the privacy stream ",(0,s.kt)("inlineCode",{parentName:"p"},"example")," ",(0,s.kt)("sup",{parentName:"p",id:"fnref-2"},(0,s.kt)("a",{parentName:"sup",href:"#fn-2",className:"footnote-ref"},"2"))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "strmMeta": {\n    "eventContractRef": "strmprivacy/example/1.3.0",\n    "nonce": -1505384217,\n    "timestamp": 1635416584627,\n    "keyLink": "67140ff9-e866-48ff-b89b-00ce69e287e6",\n    "consentLevels": [ 0, 1, 2, 3 ]\n  },\n  "uniqueIdentifier": "ATuasjJ30S4uRB64APNKNze/TH6V5NbA6gRLGjM=",\n  "consistentValue": "ATuasjKGKxAz0cIrFH9CQ/FBsizvFpQJq2t+eds8bHc=",\n  "someSensitiveValue": "ATuasjLXJ0vL0aY4CEV48O6PXU9zwm+v9ccGZBNcWzg=",\n  "notSensitiveValue": "not-sensitive-6"\n}\n')),(0,s.kt)("p",null,"We can generally recognize the encrypted values by looking at the\ntrailing ",(0,s.kt)("inlineCode",{parentName:"p"},"=")," character. The fields ",(0,s.kt)("inlineCode",{parentName:"p"},"uniqueIdentifier"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"consistentValue"),"\nand ",(0,s.kt)("inlineCode",{parentName:"p"},"someSensitiveValue")," are defined to be personal data through the\nevent contract."),(0,s.kt)("h3",{id:"the-derived-stream-events-with-no-masking"},"the derived stream events with no masking"),(0,s.kt)("p",null,"You can see in the event from the stream ",(0,s.kt)("inlineCode",{parentName:"p"},"example-3")," that all PII fields\nhave been decrypted. We see their original ",(0,s.kt)("em",{parentName:"p"},"plaintext")," value. If one of\nthese contained a customer id, every data scientist with access to this\nstream ",(0,s.kt)("em",{parentName:"p"},"and")," access to the company customer database would be able to\nlink the history in this stream to a ",(0,s.kt)("em",{parentName:"p"},"person"),"!"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "strmMeta": {\n    "eventContractRef": "strmprivacy/example/1.3.0",\n    "nonce": -1505384217,\n    "timestamp": 1635416584627,\n    "keyLink": "67140ff9-e866-48ff-b89b-00ce69e287e6",\n    "consentLevels": [ 0, 1, 2, 3 ]\n  },\n  "uniqueIdentifier": "unique-5", \n  "consistentValue": "session-273",\n  "someSensitiveValue": "sensitive-0",\n  "notSensitiveValue": "not-sensitive-6"\n}\n')),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"values are from the simulator that is available in the cli tool.")),(0,s.kt)("h3",{id:"the-derived-stream-events-with-masking"},"the derived stream events ",(0,s.kt)("strong",{parentName:"h3"},"with")," masking"),(0,s.kt)("p",null,"Assuming we want to train a recommendation engine of a customer with\nfull permissions, it would still be great if the actual customer id ",(0,s.kt)("em",{parentName:"p"},"was\nnot being used"),"."),(0,s.kt)("p",null,"We can do this with ",(0,s.kt)("strong",{parentName:"p"},"masked fields"),". The stream with masked fields\ncontains values that are always the same for the same source value. In\nthis example, the plaintext ",(0,s.kt)("inlineCode",{parentName:"p"},"uniqueIdentifier")," has the value ",(0,s.kt)("inlineCode",{parentName:"p"},"unique-5"),"\nwith a corresponding masked value of ",(0,s.kt)("inlineCode",{parentName:"p"},"1083e8169d7138e990cc30095578452"),"."),(0,s.kt)("p",null,"Event from the ",(0,s.kt)("inlineCode",{parentName:"p"},"example-M3")," stream"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "strmMeta": {\n    "eventContractRef": "strmprivacy/example/1.3.0",\n    "nonce": -1505384217,\n    "timestamp": 1635416584627,\n    "keyLink": "67140ff9-e866-48ff-b89b-00ce69e287e6",\n    "consentLevels": [ 0, 1, 2, 3 ]\n  },\n  "uniqueIdentifier": "1083e8169d7138e990cc30095578452",\n  "consistentValue": "7cc66d130664caa9efacda1026c1c44",\n  "someSensitiveValue": "e49bd309eed4a5094437a71ac2bc1cad",\n  "notSensitiveValue": "538ad30b2aa2781e855c4eb059cf68a3"\n}\n')),(0,s.kt)("p",null,"You can see we even masked the ",(0,s.kt)("inlineCode",{parentName:"p"},"notSensitiveValue"),' attribute, that no\nlonger contains the "not-sensitive-6" value. You could use this for\ninstance to provide downstream data consumers maybe outside your\ncompany with values that are not personal, but that you still want to\nkeep inside your company.'),(0,s.kt)("h2",{id:"using-the-masked-fields"},"Using the masked fields"),(0,s.kt)("p",null,"You could train a personalized model on a derived masked stream, and\nthen you could ",(0,s.kt)("em",{parentName:"p"},"recommend")," on the same stream. This way you could have a\nvery personalized model, without ever exposing sensitive personal data."),(0,s.kt)("h2",{id:"the-seed"},"The seed."),(0,s.kt)("p",null,"The masking uses a standard hashing algorithm ",(0,s.kt)("sup",{parentName:"p",id:"fnref-3"},(0,s.kt)("a",{parentName:"sup",href:"#fn-3",className:"footnote-ref"},"3")),". Assuming someone has\naccess to the customer database it would be easy to generate hash values\nfor all customer id\u2019s, a so-called ",(0,s.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Rainbow_table"},"rainbow\ntable"),". By adding a ",(0,s.kt)("em",{parentName:"p"},"seed"),"\nto the unmasked value, we make this mechanism unfeasible. The\n",(0,s.kt)("inlineCode",{parentName:"p"},"mask-seed")," is given during creation of a masked stream."),(0,s.kt)("p",null,"NOTE: the mask seed is hidden on readback of stream definitions from the\ndatabase."),(0,s.kt)("div",{className:"footnotes"},(0,s.kt)("hr",{parentName:"div"}),(0,s.kt)("ol",{parentName:"div"},(0,s.kt)("li",{parentName:"ol",id:"fn-1"},"technically a hashing function",(0,s.kt)("a",{parentName:"li",href:"#fnref-1",className:"footnote-backref"},"\u21a9")),(0,s.kt)("li",{parentName:"ol",id:"fn-2"},"I\u2019ve removed some less interesting attributes",(0,s.kt)("a",{parentName:"li",href:"#fnref-2",className:"footnote-backref"},"\u21a9")),(0,s.kt)("li",{parentName:"ol",id:"fn-3"},"currently MurmurHash3",(0,s.kt)("a",{parentName:"li",href:"#fnref-3",className:"footnote-backref"},"\u21a9")))))}u.isMDXComponent=!0}}]);