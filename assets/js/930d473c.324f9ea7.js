"use strict";(self.webpackChunkend_user_docs=self.webpackChunkend_user_docs||[]).push([[8335],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=l(n),u=r,h=m["".concat(c,".").concat(u)]||m[u]||d[u]||s;return n?a.createElement(h,i(i({ref:t},p),{},{components:n})):a.createElement(h,i({ref:t},p))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=m;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var l=2;l<s;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3886:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var a=n(7462),r=(n(7294),n(3905));const s={title:"Sending and receiving by hand",hide_table_of_contents:!1},i="Sending and receiving an event by hand",o={unversionedId:"quickstart/sending-curl",id:"quickstart/sending-curl",title:"Sending and receiving by hand",description:"This page aims to clarify how to send and receive data to STRM Privacy",source:"@site/docs/quickstart/sending-curl.md",sourceDirName:"quickstart",slug:"/quickstart/sending-curl",permalink:"/docs/latest/quickstart/sending-curl",draft:!1,tags:[],version:"current",frontMatter:{title:"Sending and receiving by hand",hide_table_of_contents:!1},sidebar:"docs",previous:{title:"Receiving events over websocket",permalink:"/docs/latest/quickstart/listen-web-socket"},next:{title:"Examples in multiple languages",permalink:"/docs/latest/quickstart/full-example"}},c={},l=[],p={toc:l};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"sending-and-receiving-an-event-by-hand"},"Sending and receiving an event by hand"),(0,r.kt)("p",null,"This page aims to clarify how to send and receive data to STRM Privacy\nwith the Avro serialization wire format, without any STRM Privacy\nspecific code."),(0,r.kt)("p",null,"STRM Privacy uses only ",(0,r.kt)("em",{parentName:"p"},"standard")," open-source formats (like Avro and\nJson-schema), authentication systems (OAuth2) and transport layers\n(http/2 and websocket and grpc)."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"This tutorial uses ",(0,r.kt)("a",{parentName:"p",href:"https://httpie.io/"},"httpie")," as a convenient\nsubstitute for curl.")),(0,r.kt)("p",null,"First create a stream."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'$ strm create stream by-hand --save\n{\n  "ref": {\n    "name": "by-hand",\n    "projectId": "30fcd008-9696-...."\n  },\n  "enabled": true,\n  "limits": {\n    "eventRate": "999999",\n    "eventCount": "999999999"\n  },\n  "credentials": [\n    {\n      "clientId": "stream-w0qu00hwl644b...",\n      "clientSecret": "OygfdpwBqoekL..."\n      "projectId": "30fcd008-9696-...."\n    }\n  ],\n  "masked_fields" : {}\n}\n')),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Use ",(0,r.kt)("a",{parentName:"p",href:"/docs/latest/quickstart/listen-web-socket"},"strm listen web-socket by-hand")," to get\nsome feedback on the events you're sending.")),(0,r.kt)("p",null,"Request an OAuth 2.0 access token that you need to be able to send events to\na certain stream."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'accessToken=$(curl -X POST -u "stream-w0qu00hwl644b...:OygfdpwBqoekL..." \\\n  -d "grant_type=client_credentials" \\\n  "https://accounts.strmprivacy.io/auth/realms/streams/protocol/openid-connect/token" | jq -r .access_token)\n')),(0,r.kt)("p",null,"You can inspect the resulting ",(0,r.kt)("inlineCode",{parentName:"p"},"$accessToken")," in ",(0,r.kt)("a",{parentName:"p",href:"https://jwt.io"},"jwt.io")," to\nsee what we store inside it."),(0,r.kt)("p",null,"We\u2019ve generated some random data with ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/confluentinc/avro-random-generator"},"this\ntool")," for the\n",(0,r.kt)("a",{parentName:"p",href:"https://console.strmprivacy.io/schemas/"},"clickstream")," demo schema."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"demo.json")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "strmMeta": {\n    "eventContractRef": "strmprivacy/clickstream/1.0.0",\n    "nonce": null,\n    "billingId": null,\n    "timestamp": null,\n    "keyLink": null,\n    "consentLevels": [0]\n  },\n  "producerSessionId": "producer",\n  "url": "https://url.com",\n  "eventType": "click",\n  "referrer": "referrer-id",\n  "userAgent": "user-agent",\n  "conversion": 0,\n  "customer": {\n    "id": "customer-id"\n  },\n  "abTests": ["a", "b"]\n}\n')),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"This is the json serialization format of Avro. Our client drivers use\nthe ",(0,r.kt)("strong",{parentName:"p"},"much faster")," and more compact Avro binary format.")),(0,r.kt)("p",null,"And use it to post some random data:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cat demo.json | http post https://events.strmprivacy.io/event\\\n  authorization:\"Bearer $accessToken\" \\\n  Strm-Schema-Id:strmprivacy/clickstream/1.0.0\n\nHTTP/1.1 400 Bad Request\n\nField: 'url' in event with schema: 'strmprivacy/clickstream/1.0.0' with value: 'url'\n  doesn't match regex: '^(https?|ftp|file)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|]'\n")),(0,r.kt)("p",null,"This is ",(0,r.kt)("em",{parentName:"p"},"as expected"),". STRM Privacy gives an indication that a\nvalidation failed. This is an example of the mechanism that STRM Privacy\nprovides to indicate to the ",(0,r.kt)("em",{parentName:"p"},"data producers")," that their data doesn\u2019t\nconform to the rules of the Event Contract."),(0,r.kt)("p",null,"Modify the ",(0,r.kt)("inlineCode",{parentName:"p"},"url")," field in ",(0,r.kt)("inlineCode",{parentName:"p"},"demo.json")," to become any valid url (like\n",(0,r.kt)("inlineCode",{parentName:"p"},"https://strmprivacy.io"),", and try to send it again:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'cat demo.json | http post https://events.strmprivacy.io/event\\\n  authorization:"Bearer $accessToken" \\\n  Strm-Schema-Id:strmprivacy/clickstream/1.0.0\nHTTP/1.1 204 No Content\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"204")," is the http status code that STRM Privacy returns when the event\nhas been accepted and processed."),(0,r.kt)("h1",{id:"curl-instead-of-httpie"},"Curl instead of httpie"),(0,r.kt)("p",null,"When using ",(0,r.kt)("inlineCode",{parentName:"p"},"curl")," instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"httpie")," it is possible to observe the\nhttp/2 response, indicating the use of http/2 with its ",(0,r.kt)("strong",{parentName:"p"},"much")," higher\nthroughput."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl -v https://events.strmprivacy.io/event \\\n    -H "authorization: Bearer $accessToken" \\\n    -H "Strm-Schema-Id:strmprivacy/clickstream/1.0.0" --data-binary @demo.json\n\n...\n* Using HTTP2, server supports multiplexing\n* Connection state changed (HTTP/2 confirmed)\n...\n> POST /event HTTP/2\n> Host: events.strmprivacy.io\n...\n> strm-schema-id:strmprivacy/clickstream/1.0.0\n> content-length: 434\n>\n...\n< HTTP/2 204\n')),(0,r.kt)("h1",{id:"decrypting-data"},"Decrypting data"),(0,r.kt)("p",null,"First, create a decrypted stream:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'strm create stream --derived-from by-hand --levels 2 --save\n{\n  "ref": { "name": "by-hand-2", "projectId": "30fcd008-9696-...." },\n  "consentLevels": [ 2 ],\n  "consentLevelType": "CUMULATIVE",\n  "enabled": true,\n  "linkedStream": "by-hand",\n  "credentials": [\n    { "clientId": "hx7hj7w5mwkbybdrwhale1hvq0r6qk",\n      "clientSecret": "#Fs4DkVtJh(2uss#062hGuzTLW9u5t",\n      "projectId": "30fcd008-9696-...."\n    }\n  ]\n}\n')),(0,r.kt)("p",null,"Send an event as describe above with curl or httpie. Observe the\ndecrypted attributes in the events received from the web-socket."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'$ strm listen web-socket by-hand-2\n\n{\n  "strmMeta": {\n    "eventContractRef": "strmprivacy/example/1.3.0",\n    "nonce": 15082564,\n    "timestamp": 1629192833072,\n    "keyLink": "55c2f72b-cff8-4814-ae33-e125c77e50f9",\n    "consentLevels": [ 0, 1, 2, 3 ]\n  },\n  "uniqueIdentifier": "unique-14",\n  "consistentValue": "session-740",\n  "someSensitiveValue": "ASB9bJrnYjxjNF5Txc+Wc2k1zvzFAmE03SYK499WK5Du",\n  "notSensitiveValue": "not-sensitive-39"\n}\n')),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"That most fields are decrypted, but the ",(0,r.kt)("inlineCode",{parentName:"p"},"someSensitiveValue")," field is\n",(0,r.kt)("strong",{parentName:"p"},"not")," because that is of consent level 3 (see the event contract). If\nthe event had not contained ",(0,r.kt)("inlineCode",{parentName:"p"},"2")," in its consent levels, we wouldn't even\nhave seen the event in this decrypted stream.")),(0,r.kt)("p",null,"And finally, to clean up the resources:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"strm delete stream by-hand --recursive\n\n# note that everything that has been deleted is returned from this call.\n")),(0,r.kt)("h1",{id:"receiving-from-the-websocket-without-the-strm-cli"},"Receiving from the websocket without the strm cli."),(0,r.kt)("p",null,"If you want to retrieve json serialized events ",(0,r.kt)("em",{parentName:"p"},"without using the strm\nlisten web-socket tool"),", do ",(0,r.kt)("a",{parentName:"p",href:"/docs/latest/quickstart/listen-web-socket#wscat"},"these\nsteps"),"."))}d.isMDXComponent=!0}}]);